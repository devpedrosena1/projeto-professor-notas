create table t_professor (
    id_prof NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nome VARCHAR2(50) NOT NULL,
    pf VARCHAR2(10) NOT NULL,
    senha VARCHAR2(20) NOT NULL
);

create table t_turma (
    id_turma NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nome_turma VARCHAR2(50) NOT NULL,
    id_professor NUMBER NOT NULL,
    FOREIGN KEY (id_professor) REFERENCES t_professor(id_prof)
);

create table t_aluno (
    id_aluno NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nome VARCHAR2(50) NOT NULL,import oracledb

def obter_conexao():
    try:
        conexao = oracledb.connect(
            user='rm561178',
            password='200905',
            dsn='oracle.fiap.com.br/orcl'
        )
        print(f'Conectado com o banco de dados! {conexao.version}')

        return conexao
    
    except oracledb.DatabaseError as e:
        erro = e.args
        print(f'Erro ao conectar com o banco de dados: {erro.code} - {erro.message}')
        return None
    
def inserir_professor(nome, pf, senha):
    conexao = obter_conexao()
    if conexao is None:
        print("Falha ao obter conexão com banco de dados.")
        return
    
    try:
        with conexao.cursor() as cur:
            pf = pf.lower()

            cur.execute("SELECT COUNT(*) FROM t_professor WHERE LOWER(pf) = :1", [pf])
            result = cur.fetchone()

            if result[0] > 0:
                print("Erro: o PF fornecido já existe. Tente fazer login.")
                return
            
            id_professor = -cur.var(oracledb.NUMBER)
            
            sql = """
                INSERT INTO t_professor (nome, pf, senha) VALUES (:1, :2, :3) RETURNING id INTO :4
            """

            cur.execute(sql, [nome, pf, senha, id_professor])
            conexao.commit()
            print("Professor cadastrado com sucesso!")
            return int(id_professor.getvalue())
        
    except oracledb.IntegrityError as e:
        print(f'Errode integridade: {e}')
    except oracledb.DatabaseError as e:
        print(f'Erro de conexão com o banco de dados: {e}')
    finally:
        if conexao:
            conexao.close()


    rm VARCHAR(20) UNIQUE NOT NULL,
    id_turma NUMBER NOT NULL,
    FOREIGN KEY (id_turma) REFERENCES t_turma(id_turma)
);

create table t_notas (
    id_notas NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    id_aluno NUMBER NOT NULL,
    id_professor NUMBER NOT NULL,
    nota1 NUMBER(5,2) CHECK (nota1 BETWEEN 0 AND 10),
    nota2 NUMBER(5,2) CHECK (nota2 BETWEEN 0 AND 10),
    nota3 NUMBER(5,2) CHECK (nota3 BETWEEN 0 AND 10),
    media NUMBER(5,2) CHECK (media BETWEEN 0 AND 10),
    FOREIGN KEY (id_aluno) REFERENCES t_aluno(id_aluno),
    FOREIGN KEY (id_professor) REFERENCES t_professor(id_prof)
);

select * from t_notas;

-- PROFESSOR
INSERT INTO T_PROFESSOR (
    nome,
    pf,
    senha
) VALUES (
    'Arnaldo',
    'pf1678',
    'prof123'
);

select * from t_professor;
alter table t_turma MODIFY id_professor NUMBER;

-- TURMA
INSERT INTO T_TURMA(
    nome_turma,
    id_professor
) VALUES (
    '1TDSQ',
    1
);

select * from t_turma;

-- ALUNO
INSERT INTO T_ALUNO (
    nome,
    rm,
    id_turma
) VALUES (
    'Pedro',
    'rm561178',
    1
);

Select * from t_aluno;

-- NOTAS
INSERT INTO T_NOTAS (
    id_aluno,
    id_professor,
    nota1,
    nota2,
    nota3,
    media
) VALUES (
    2,
    1,
    10,
    9,
    8,
    9
);

select * from t_notas;